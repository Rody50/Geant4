#include "SingleParticleState.h"
#include "PairingConfiguration.h"
#include "InfiniteMatterSP.h"
#include "FCI.h"
#include "CCM.h"

int main()
{
    SingleParticleState sPS(2);

	sPS.GenerateSPS();
//	sPS.print();

	int N = 4;
	int no_pairs = 2;

	FCI hamiltonian(N, no_pairs);

	hamiltonian.GenerateMatrix(1.0, 1.0);
//	hamiltonian.Print();
	
	// double g = -1.;
	// double eigenVec00, eigenVal0;
	// std::ofstream file0("results/eigVal0_10.txt");
	// std::ofstream file1("results/eigVec00_10.txt");
	
	// for(int i = 0 ; i < 21; i++){
	// 	g += 0.1;
	// 	hamiltonian.GenerateMatrix(g, 1.0);
	// 	hamiltonian.eigenValue(eigenVal0, eigenVec00);
	// 	file0 << g << "\t" << eigenVal0 - (2*1.0-g) << endl;
	// 	file1 << g << "\t" << eigenVec00 << endl;
	// }

	// int nLevels = 16;
	// int particles = 4;

//	CCM coupled(particles, nLevels, .5, 1.);
//	cout << "The Hamiltonian: " << endl;
//	coupled.SolveT();
	
	int nshell = 3, NMax = 2;
	double rho = 0.08; // nucleon density      unit: fm^-3
	InfiniteMatterSP spMatter(NMax, nshell, rho);
	spMatter.GenerateSP();
//	spMatter.Print();
	spMatter.ConstructPairs();
	double corr_en = spMatter.CorrelationEnergy();
	cout << "The total correlation energy is: " << corr_en << endl;
	
	return 0;
}
