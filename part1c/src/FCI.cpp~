
#include "FCI.h"
#include "PairingConfiguration.h"

FCI::FCI(int N, int n_pairs) : fN(N), fN_pairs(n_pairs), fPairConfig(N, n_pairs){
	fPairConfig.GenerateConfig();
	fConfiguration = fPairConfig.getConfigVec();

	const int size = fConfiguration.size();
	fHamiltonian = new mat(size, size);
}
double FCI::MatrixElement(int config, int config_prime, double g, double d)
{
	int energy = 0;
	int n = 0;

	for (int state = 0; state < fN; state++)
	{
		short i = (config>>state) & 0x1;
		short i_prime = (config_prime>>state) & 0x1;

		if (i == i_prime && i == 1)
			energy += 2 * state;

		if (i != i_prime) n++;
	}

	if (n ==  0) return energy * d - g * fN_pairs / 2.;
	else if (n == 2) return - g / 2.0;
	else return 0.0;
}

void FCI::GenerateMatrix(double g, double d)
{
	int dim = fConfiguration.size();

	for (int i = 0; i < dim; i++)
		for (int j = i; j < dim; j++)
		{
			double ME = 
				MatrixElement(fConfiguration[i], fConfiguration[j], g, d);
			(*fHamiltonian)(i + j * dim) = ME;
			
			if (i != j)
				(*fHamiltonian)(j + i * dim) = ME;
		}
}

void FCI::eigenValue(double &eigenValue, double &eigenVec00)
{
	int length = fConfiguration.size();

	vec eigval(length);

	mat eigvec;

	eig_sym(eigval, eigvec, *fHamiltonian);

	eigenValue = eigval[0];
	eigenVec00 = eigvec[0];
}

void FCI::Print()
{
	fPairConfig.Print();
	fHamiltonian->print();
}

void FCI::WriteToFile()
{

}
